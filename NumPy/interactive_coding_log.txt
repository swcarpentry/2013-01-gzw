bash-3.2$ ipydev
Python 2.7.3 (default, May 29 2012, 09:32:35) 
Type "copyright", "credits" or "license" for more information.

IPython 0.13 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: np.array([ [1, 2], np.array([3, 4]) ])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-1-0cd9b42bfb1a> in <module>()
----> 1 np.array([ [1, 2], np.array([3, 4]) ])

NameError: name 'np' is not defined

In [2]: import numpy as np

In [3]: np.array([ [1, 2], np.array([3, 4]) ])
Out[3]: 
array([[1, 2],
       [3, 4]])

In [4]: np.array([1, 2, 3])
Out[4]: array([1, 2, 3])

In [5]: np.array([1, 2., 3.])
Out[5]: array([ 1.,  2.,  3.])

In [6]: np.array([[1, 2], [3, 4]])
Out[6]: 
array([[1, 2],
       [3, 4]])

In [7]: np.diag([0, 1, 2, 3, 4])
Out[7]: 
array([[0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 2, 0, 0],
       [0, 0, 0, 3, 0],
       [0, 0, 0, 0, 4]])

In [8]: array([[0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 2, 0, 0],
       [0, 0, 0, 3, 0],
       [0, 0, 0, 0, 4]])
   ...:    ...:    ...:    ...: ---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-8-a5db34499a5d> in <module>()
----> 1 array([[0, 0, 0, 0, 0],
      2        [0, 1, 0, 0, 0],
      3        [0, 0, 2, 0, 0],
      4        [0, 0, 0, 3, 0],
      5        [0, 0, 0, 0, 4]])

NameError: name 'array' is not defined

In [9]: np.array([[0, 0, 0, 0, 0],
   ...: 
       [0, 1, 0, 0, 0],  C-c C-c
KeyboardInterrupt

In [9]: 

In [9]: np.array([[0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 2, 0, 0],
       [0, 0, 0, 3, 0],
       [0, 0, 0, 0, 4]])
   ...:    ...:    ...:    ...: Out[9]: 
array([[0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 2, 0, 0],
       [0, 0, 0, 3, 0],
       [0, 0, 0, 0, 4]])

In [10]: np.diag(np.arange(4))
Out[10]: 
array([[0, 0, 0, 0],
       [0, 1, 0, 0],
       [0, 0, 2, 0],
       [0, 0, 0, 3]])

In [11]: np.diag(np.arange(4))
Out[11]: 
array([[0, 0, 0, 0],
       [0, 1, 0, 0],
       [0, 0, 2, 0],
       [0, 0, 0, 3]])

In [12]: np.diag(np.arange(5))
Out[12]: 
array([[0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 2, 0, 0],
       [0, 0, 0, 3, 0],
       [0, 0, 0, 0, 4]])

In [13]: np.diag(range(5))
Out[13]: 
array([[0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 2, 0, 0],
       [0, 0, 0, 3, 0],
       [0, 0, 0, 0, 4]])

In [14]: a = np.arange(6)**2

In [15]: a
Out[15]: array([ 0,  1,  4,  9, 16, 25])

In [16]: a % 2
Out[16]: array([0, 1, 0, 1, 0, 1])

In [17]: a[a % 2]
Out[17]: array([0, 1, 0, 1, 0, 1])

In [18]: a[a % 2 == 0]
Out[18]: array([ 0,  4, 16])

In [19]: np.pi
Out[19]: 3.141592653589793

In [20]: np.e
Out[20]: 2.718281828459045

In [21]: a = np.arange(10)

In [22]: a
Out[22]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [23]: a.view()
Out[23]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [24]: b = a.view()

In [25]: a
Out[25]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [26]: b
Out[26]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [27]: a is b
Out[27]: False

In [28]: a[0] = 42

In [29]: a
Out[29]: array([42,  1,  2,  3,  4,  5,  6,  7,  8,  9])

In [30]: b
Out[30]: array([42,  1,  2,  3,  4,  5,  6,  7,  8,  9])

In [31]: a
Out[31]: array([42,  1,  2,  3,  4,  5,  6,  7,  8,  9])

In [32]: np.take(a, [2, 3, 1])
Out[32]: array([2, 3, 1])

In [33]: np.take(a**2, [2, 3, 1])
Out[33]: array([4, 9, 1])

In [34]: x = np.arange(10)-5

In [35]: x
Out[35]: array([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4])

In [36]: np.array([element for element in x if x > 0])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-36-9e108101519d> in <module>()
----> 1 np.array([element for element in x if x > 0])

ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()

In [37]: np.array([element for element in x if element > 0])
Out[37]: array([1, 2, 3, 4])

In [38]: x
Out[38]: array([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4])

In [39]: np.where(x > 0, 1, 0)
Out[39]: array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])

In [40]: np.repeat(x, np.where(x > 0, 1, 0))
Out[40]: array([1, 2, 3, 4])

In [41]: np.where(x > 0, 1, 0)
Out[41]: array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])

In [42]: x >0
Out[42]: array([False, False, False, False, False, False,  True,  True,  True,  True], dtype=bool)

In [43]: np.repeat(x, x > 0)
Out[43]: array([1, 2, 3, 4])

In [44]: x[x > 0]
Out[44]: array([1, 2, 3, 4])

In [45]: a = np.arange(3)

In [46]: b = np.array([-1, 1, 2])

In [47]: a
Out[47]: array([0, 1, 2])

In [48]: b
Out[48]: array([-1,  1,  2])

In [49]: a*b
Out[49]: array([0, 1, 4])

In [50]: np.outer(a, b)
Out[50]: 
array([[ 0,  0,  0],
       [-1,  1,  2],
       [-2,  2,  4]])

In [51]: help(np.outer)
WARNING: terminal is not fully functional
-  (press RETURN)
Help on function outer in module numpy.core.numeric:

outer(a, b)
    Compute the outer product of two vectors.
    
    Given two vectors, ``a = [a0, a1, ..., aM]`` and
    ``b = [b0, b1, ..., bN]``,
    the outer product [1]_ is::
    
      [[a0*b0  a0*b1 ... a0*bN ]
       [a1*b0    .
       [ ...          .
       [aM*b0            aM*bN ]]
    
    Parameters
    ----------
    a, b : array_like, shape (M,), (N,)
        First and second input vectors.  Inputs are flattened if they
        are not already 1-dimensional.
    
    Returns
    -------
    out : ndarray, shape (M, N)
:
        ``out[i, j] = a[i] * b[j]``
:
    
:
    See also
:
    --------
:
    inner, einsum
:
    
:
    References
:
    ----------
:
    .. [1] : G. H. Golub and C. F. van Loan, *Matrix Computations*, 3rd
:
             ed., Baltimore, MD, Johns Hopkins University Press, 1996,
:
             pg. 8.
:
    
:
    Examples
:
    --------
:
    Make a (*very* coarse) grid for computing a Mandelbrot set:
:
    
:
    >>> rl = np.outer(np.ones((5,)), np.linspace(-2, 2, 5))
:
    >>> rl
:
    array([[-2., -1.,  0.,  1.,  2.],
:
           [-2., -1.,  0.,  1.,  2.],
:
           [-2., -1.,  0.,  1.,  2.],
:
           [-2., -1.,  0.,  1.,  2.],
:
           [-2., -1.,  0.,  1.,  2.]])
:
    >>> im = np.outer(1j*np.linspace(2, -2, 5), np.ones((5,)))
:
    >>> im
:
    array([[ 0.+2.j,  0.+2.j,  0.+2.j,  0.+2.j,  0.+2.j],
:
           [ 0.+1.j,  0.+1.j,  0.+1.j,  0.+1.j,  0.+1.j],
:
           [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j],
:
           [ 0.-1.j,  0.-1.j,  0.-1.j,  0.-1.j,  0.-1.j],
:
           [ 0.-2.j,  0.-2.j,  0.-2.j,  0.-2.j,  0.-2.j]])
:
    >>> grid = rl + im
:
    >>> grid
:q


In [52]: 
In [52]: a
Out[52]: array([0, 1, 2])

In [53]: b
Out[53]: array([-1,  1,  2])

In [54]: a2 = np.array([a, a, a])

In [55]: b2 = np.array([b, b, b])

In [56]: a
Out[56]: array([0, 1, 2])

In [57]: a2
Out[57]: 
array([[0, 1, 2],
       [0, 1, 2],
       [0, 1, 2]])

In [58]: b2
Out[58]: 
array([[-1,  1,  2],
       [-1,  1,  2],
       [-1,  1,  2]])

In [59]: np.transpose(a2)
Out[59]: 
array([[0, 0, 0],
       [1, 1, 1],
       [2, 2, 2]])

In [60]: b2
Out[60]: 
array([[-1,  1,  2],
       [-1,  1,  2],
       [-1,  1,  2]])

In [61]: np.transpose(a2)*b2
Out[61]: 
array([[ 0,  0,  0],
       [-1,  1,  2],
       [-2,  2,  4]])

In [62]: b[np.newaxis, :]
Out[62]: array([[-1,  1,  2]])

In [63]: a[:, np.newaxis]
Out[63]: 
array([[0],
       [1],
       [2]])

In [64]: a[:, np.newaxis] * b[np.newaxis, :]
Out[64]: 
array([[ 0,  0,  0],
       [-1,  1,  2],
       [-2,  2,  4]])

In [65]: x
Out[65]: array([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4])

In [66]: x ** np.arange(3)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-66-02aaab33c50e> in <module>()
----> 1 x ** np.arange(3)

ValueError: operands could not be broadcast together with shapes (10) (3) 

In [67]: x[:, np.newaxis] ** np.arange(3)[np.newaxis, :]
Out[67]: 
array([[ 1, -5, 25],
       [ 1, -4, 16],
       [ 1, -3,  9],
       [ 1, -2,  4],
       [ 1, -1,  1],
       [ 1,  0,  0],
       [ 1,  1,  1],
       [ 1,  2,  4],
       [ 1,  3,  9],
       [ 1,  4, 16]])

In [68]: np.loadtxt('matrix.txt')
Out[68]: 
array([[ 1.,  2.,  3.],
       [ 4.,  3.,  2.],
       [ 6.,  4.,  2.],
       [ 2.,  5.,  8.]])

In [69]: np.savetxt?
Type:       function
String Form:<function savetxt at 0x101cb0a28>
File:       /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/lib/npyio.py
Definition: np.savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\n')
Docstring:
Save an array to a text file.

Parameters
----------
fname : filename or file handle
    If the filename ends in ``.gz``, the file is automatically saved in
    compressed gzip format.  `loadtxt` understands gzipped files
    transparently.
X : array_like
    Data to be saved to a text file.
fmt : str or sequence of strs
    A single format (%10.5f), a sequence of formats, or a
    multi-format string, e.g. 'Iteration %d -- %10.5f', in which
    case `delimiter` is ignored. For complex `X`, the legal options
    for `fmt` are:
        a) a single specifier, `fmt='%.4e'`, resulting in numbers formatted
            like `' (%s+%sj)' % (fmt, fmt)`
        b) a full string specifying every real and imaginary part, e.g.
            `' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns
        c) a list of specifiers, one per column - in this case, the real
            and imaginary part must have separate specifiers,
            e.g. `['%.3e + %.3ej', '(%.15e%+.15ej)']` for 2 columns
delimiter : str, optional
    Character separating columns.
newline : str
    .. versionadded:: 1.5.0

    Character separating lines.

See Also
--------
save : Save an array to a binary file in NumPy ``.npy`` format
savez : Save several arrays into a ``.npz`` compressed archive

Notes
-----
Further explanation of the `fmt` parameter
(``%[flag]width[.precision]specifier``):

flags:
    ``-`` : left justify

    ``+`` : Forces to preceed result with + or -.

    ``0`` : Left pad the number with zeros instead of space (see width).

width:
    Minimum number of characters to be printed. The value is not truncated
    if it has more characters.

precision:
    - For integer specifiers (eg. ``d,i,o,x``), the minimum number of
      digits.
    - For ``e, E`` and ``f`` specifiers, the number of digits to print
      after the decimal point.
    - For ``g`` and ``G``, the maximum number of significant digits.
    - For ``s``, the maximum number of characters.

specifiers:
    ``c`` : character

    ``d`` or ``i`` : signed decimal integer

    ``e`` or ``E`` : scientific notation with ``e`` or ``E``.

    ``f`` : decimal floating point

    ``g,G`` : use the shorter of ``e,E`` or ``f``

    ``o`` : signed octal

    ``s`` : string of characters

    ``u`` : unsigned decimal integer

    ``x,X`` : unsigned hexadecimal integer

This explanation of ``fmt`` is not complete, for an exhaustive
specification see [1]_.

References
----------
.. [1] `Format Specification Mini-Language
       <http://docs.python.org/library/string.html#
       format-specification-mini-language>`_, Python Documentation.

Examples
--------
>>> x = y = z = np.arange(0.0,5.0,1.0)
>>> np.savetxt('test.out', x, delimiter=',')   # X is an array
>>> np.savetxt('test.out', (x,y,z))   # x,y,z equal sized 1D arrays
>>> np.savetxt('test.out', x, fmt='%1.4e')   # use exponential notation

In [70]: np.savetxt('matrix2.txt', 2.*np.loadtxt('matrix.txt'))

In [71]: x = np.array([1., 2., -3., 0.])

In [72]: x
Out[72]: array([ 1.,  2., -3.,  0.])

In [73]: x[1:]
Out[73]: array([ 2., -3.,  0.])

In [74]: x[:-1]
Out[74]: array([ 1.,  2., -3.])

In [75]: x[1:]-x[:-1]
Out[75]: array([ 1., -5.,  3.])

In [76]: 